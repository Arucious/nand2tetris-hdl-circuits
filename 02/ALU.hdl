// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	// output handled here, not status
	Mux16(a=x ,b=false ,sel=zx ,out=x1); // zero the x?
	Mux16(a=y ,b=false ,sel=zy ,out=y1); // zero the y?
	Not16(in=x1 ,out=negx); // create a negation of the x in case we need it
	Mux16(a=x1 ,b=negx ,sel=nx ,out=x2); // negate the x?
	Not16(in=y1, out=negy); // create a negation of the y in case we need it
	Mux16(a=y1 ,b=negy ,sel=ny ,out=y2); // negate the y?
	Add16(a=x2, b=y2, out=w2); // add if needed
	And16(a=x2, b=y2, out=w1); // and if needed
	Mux16(a=w1, b=w2, sel=f, out=w3); // choose between add or and
	Not16(in=w3, out=notoutput); // negate output if needed
	Mux16(a=w3, b=notoutput, sel=no, out=out, out[0..7]=former, out[8..15]=latter, out[15]=lastbit); // negating output?
	
	// output status zr
	Or8Way(in=former, out=or1); // former needs to be all 0 for a zero here
	Or8Way(in=latter, out=or2); // latter needs to be all 0 for a zero here
	Or(a=or1, b=or2, out=invertedzero); // if all bits are 0, this will be a zero
	Not(in=invertedzero, out=zr); // invert the previous, will tell you if it's all zero or not
	
	// output status ng
	And(a=lastbit, b=true, out=ng); // first bit a 1? It is negative in 2s complement
	
}
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// cpu consists of alu, d register, a register, and memory
    ALU(x=dOut ,y=aMem ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outALU ,zr=outZR ,ng=outNG); 
	
	
	// 
	Not(in=instruction[15], out=aInstruction); // checks to see if A instruc or C instruc
	Mux16(a=outALU ,b=instruction ,sel=aInstruction ,out=muxOutA);  // 
	Or(a=aInstruction, b=instruction[5], out=orOutA); // don't run as an A instruc if it isn't one
	ARegister(in=muxOutA ,load=orOutA ,out[0..14]=addrA, out=aRegOut ); // use a reg if an A instruc
	And(a=instruction[15], b=instruction[3], out=writeM); // the third bit is the selector for writeM
	And(a=instruction[15], b=instruction[12], out=aOrMem);
	Mux16(a=aRegOut, b=inM, sel=aOrMem, out=aMem);
	And(a=instruction[15], b=instruction[4], out=dIn);
	DRegister(in=outALU,load=dIn, out=dOut);
	// program counter needs to take in the instruction for the next round      	
	Not(in=outZR, out=notZR);
	Not(in=outNG, out=notNG);
	And(a=instruction[0], b=instruction[5], out=jump);
	And(a=notNG, b=notZR, out=jump2);
	And(a=jump, b=jump2, out=jump1);
	And(a=instruction[1], b=instruction[15], out=jump4);
	And(a=jump4, b=outZR, out=jump5);
	And(a=instruction[15], b=instruction[2], out=jump6);
	And(a=jump6, b=outNG, out=jump7);
	Or(a=jump1, b=jump5, out=jump8);
	Or(a=jump7, b=jump8, out=jump9);

	PC(in=pcIN, load=jump9, inc=true, reset=reset, out[0..14]=pc);
}
